{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyN56B2pkftbUvlxJo/UWt92",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Abhishek264/ml-bootcamp/blob/main/ml%20day3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mX2T7w2gam8n"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 840
        },
        "id": "0b9jt7kBda0L",
        "outputId": "409f35f3-9666-4484-9e7f-44e133651436"
      },
      "source": [
        "data=pd.read_csv(\"/content/ipl_matches.csv\")\n",
        "data"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>season</th>\n",
              "      <th>city</th>\n",
              "      <th>date</th>\n",
              "      <th>team1</th>\n",
              "      <th>team2</th>\n",
              "      <th>toss_winner</th>\n",
              "      <th>toss_decision</th>\n",
              "      <th>result</th>\n",
              "      <th>dl_applied</th>\n",
              "      <th>winner</th>\n",
              "      <th>win_by_runs</th>\n",
              "      <th>win_by_wickets</th>\n",
              "      <th>player_of_match</th>\n",
              "      <th>venue</th>\n",
              "      <th>umpire1</th>\n",
              "      <th>umpire2</th>\n",
              "      <th>umpire3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>2017</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>2017-04-05</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>Yuvraj Singh</td>\n",
              "      <td>Rajiv Gandhi International Stadium, Uppal</td>\n",
              "      <td>AY Dandekar</td>\n",
              "      <td>NJ Llong</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>2017</td>\n",
              "      <td>Pune</td>\n",
              "      <td>2017-04-06</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>SPD Smith</td>\n",
              "      <td>Maharashtra Cricket Association Stadium</td>\n",
              "      <td>A Nand Kishore</td>\n",
              "      <td>S Ravi</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>2017</td>\n",
              "      <td>Rajkot</td>\n",
              "      <td>2017-04-07</td>\n",
              "      <td>Gujarat Lions</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>CA Lynn</td>\n",
              "      <td>Saurashtra Cricket Association Stadium</td>\n",
              "      <td>Nitin Menon</td>\n",
              "      <td>CK Nandan</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2017</td>\n",
              "      <td>Indore</td>\n",
              "      <td>2017-04-08</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>GJ Maxwell</td>\n",
              "      <td>Holkar Cricket Stadium</td>\n",
              "      <td>AK Chaudhary</td>\n",
              "      <td>C Shamshuddin</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>2017</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>2017-04-08</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Delhi Daredevils</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>bat</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>KM Jadhav</td>\n",
              "      <td>M Chinnaswamy Stadium</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>631</th>\n",
              "      <td>632</td>\n",
              "      <td>2016</td>\n",
              "      <td>Raipur</td>\n",
              "      <td>2016-05-22</td>\n",
              "      <td>Delhi Daredevils</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>V Kohli</td>\n",
              "      <td>Shaheed Veer Narayan Singh International Stadium</td>\n",
              "      <td>A Nand Kishore</td>\n",
              "      <td>BNJ Oxenford</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>632</th>\n",
              "      <td>633</td>\n",
              "      <td>2016</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>2016-05-24</td>\n",
              "      <td>Gujarat Lions</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>AB de Villiers</td>\n",
              "      <td>M Chinnaswamy Stadium</td>\n",
              "      <td>AK Chaudhary</td>\n",
              "      <td>HDPK Dharmasena</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>633</th>\n",
              "      <td>634</td>\n",
              "      <td>2016</td>\n",
              "      <td>Delhi</td>\n",
              "      <td>2016-05-25</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>MC Henriques</td>\n",
              "      <td>Feroz Shah Kotla</td>\n",
              "      <td>M Erasmus</td>\n",
              "      <td>C Shamshuddin</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>634</th>\n",
              "      <td>635</td>\n",
              "      <td>2016</td>\n",
              "      <td>Delhi</td>\n",
              "      <td>2016-05-27</td>\n",
              "      <td>Gujarat Lions</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>DA Warner</td>\n",
              "      <td>Feroz Shah Kotla</td>\n",
              "      <td>M Erasmus</td>\n",
              "      <td>CK Nandan</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>635</th>\n",
              "      <td>636</td>\n",
              "      <td>2016</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>2016-05-29</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>bat</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>BCJ Cutting</td>\n",
              "      <td>M Chinnaswamy Stadium</td>\n",
              "      <td>HDPK Dharmasena</td>\n",
              "      <td>BNJ Oxenford</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>636 rows × 18 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      id  season       city  ...          umpire1          umpire2 umpire3\n",
              "0      1    2017  Hyderabad  ...      AY Dandekar         NJ Llong     NaN\n",
              "1      2    2017       Pune  ...   A Nand Kishore           S Ravi     NaN\n",
              "2      3    2017     Rajkot  ...      Nitin Menon        CK Nandan     NaN\n",
              "3      4    2017     Indore  ...     AK Chaudhary    C Shamshuddin     NaN\n",
              "4      5    2017  Bangalore  ...              NaN              NaN     NaN\n",
              "..   ...     ...        ...  ...              ...              ...     ...\n",
              "631  632    2016     Raipur  ...   A Nand Kishore     BNJ Oxenford     NaN\n",
              "632  633    2016  Bangalore  ...     AK Chaudhary  HDPK Dharmasena     NaN\n",
              "633  634    2016      Delhi  ...        M Erasmus    C Shamshuddin     NaN\n",
              "634  635    2016      Delhi  ...        M Erasmus        CK Nandan     NaN\n",
              "635  636    2016  Bangalore  ...  HDPK Dharmasena     BNJ Oxenford     NaN\n",
              "\n",
              "[636 rows x 18 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TbI52X0jdl68",
        "outputId": "f32835fa-d832-4e2a-c0e1-c8adf57bd6d4"
      },
      "source": [
        "data.shape"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(636, 18)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QWBPudqDduU7",
        "outputId": "c66c9eea-3363-4d38-af66-e1163c15105f"
      },
      "source": [
        "data.isnull().sum()"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                   0\n",
              "season               0\n",
              "city                 7\n",
              "date                 0\n",
              "team1                0\n",
              "team2                0\n",
              "toss_winner          0\n",
              "toss_decision        0\n",
              "result               0\n",
              "dl_applied           0\n",
              "winner               3\n",
              "win_by_runs          0\n",
              "win_by_wickets       0\n",
              "player_of_match      3\n",
              "venue                0\n",
              "umpire1              1\n",
              "umpire2              1\n",
              "umpire3            636\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        },
        "id": "ALl_kp4peTbF",
        "outputId": "fa2d71c8-f5c4-47a9-c693-31600618d7a5"
      },
      "source": [
        "sns.heatmap(data.isnull(),cmap=\"Blues\")"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fd03c84cb90>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k4107hGmfLX9"
      },
      "source": [
        "data.drop('umpire3',axis=1,inplace=True)"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xXnUnV0qfr2t",
        "outputId": "a28c0a97-2ae3-491a-cab8-29396dfdb68f"
      },
      "source": [
        "print(data)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "      id  season  ...          umpire1          umpire2\n",
            "0      1    2017  ...      AY Dandekar         NJ Llong\n",
            "1      2    2017  ...   A Nand Kishore           S Ravi\n",
            "2      3    2017  ...      Nitin Menon        CK Nandan\n",
            "3      4    2017  ...     AK Chaudhary    C Shamshuddin\n",
            "4      5    2017  ...              NaN              NaN\n",
            "..   ...     ...  ...              ...              ...\n",
            "631  632    2016  ...   A Nand Kishore     BNJ Oxenford\n",
            "632  633    2016  ...     AK Chaudhary  HDPK Dharmasena\n",
            "633  634    2016  ...        M Erasmus    C Shamshuddin\n",
            "634  635    2016  ...        M Erasmus        CK Nandan\n",
            "635  636    2016  ...  HDPK Dharmasena     BNJ Oxenford\n",
            "\n",
            "[636 rows x 17 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xwUw5AMKfuLP",
        "outputId": "2cf507e4-6373-4bbf-e8b3-a471f694d493"
      },
      "source": [
        "data[\"season\"].unique()\n",
        "data[\"season\"].value_counts()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2013    76\n",
              "2012    74\n",
              "2011    73\n",
              "2016    60\n",
              "2014    60\n",
              "2010    60\n",
              "2017    59\n",
              "2015    59\n",
              "2008    58\n",
              "2009    57\n",
              "Name: season, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "id": "lPH2PiTHg5pJ",
        "outputId": "07f539ca-6cfa-4f06-ae06-f1bd387f0396"
      },
      "source": [
        "sns.countplot(data[\"season\"])"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fd02fa5ea90>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 405
        },
        "id": "-Rszez1tg-bD",
        "outputId": "adcdf43c-2a60-4dcf-fc63-16736a6e6905"
      },
      "source": [
        "plt.figure(figsize=(10,6))\n",
        "sns.countplot(y=data['city'])"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fd0346e92d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cQf96YouhgZZ",
        "outputId": "60f1523c-a992-444e-ed55-a7d019c3a23d"
      },
      "source": [
        "data['win_by_runs'].max()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "146"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "2wwxwKcRmF66",
        "outputId": "39b18f5b-5e7f-4b39-ea9a-d2c6b5dbb258"
      },
      "source": [
        "data[data['win_by_runs'] == 146][['season', 'city', 'team1', 'team2','win_by_runs', 'winner']]"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>season</th>\n",
              "      <th>city</th>\n",
              "      <th>team1</th>\n",
              "      <th>team2</th>\n",
              "      <th>win_by_runs</th>\n",
              "      <th>winner</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>2017</td>\n",
              "      <td>Delhi</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>Delhi Daredevils</td>\n",
              "      <td>146</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    season   city  ... win_by_runs          winner\n",
              "43    2017  Delhi  ...         146  Mumbai Indians\n",
              "\n",
              "[1 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zH2tBbu9maqi",
        "outputId": "27e9aebc-1753-4372-9fff-7192fad5aa3d"
      },
      "source": [
        "data['winner'].value_counts()"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Mumbai Indians                 92\n",
              "Chennai Super Kings            79\n",
              "Kolkata Knight Riders          77\n",
              "Royal Challengers Bangalore    73\n",
              "Kings XI Punjab                70\n",
              "Rajasthan Royals               63\n",
              "Delhi Daredevils               62\n",
              "Sunrisers Hyderabad            42\n",
              "Deccan Chargers                29\n",
              "Gujarat Lions                  13\n",
              "Pune Warriors                  12\n",
              "Rising Pune Supergiant         10\n",
              "Kochi Tuskers Kerala            6\n",
              "Rising Pune Supergiants         5\n",
              "Name: winner, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dUCEBdlcoORu"
      },
      "source": [
        "data.replace({'Delhi Daredevils': 'Delhi Capitals'}, inplace = True)\n"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 840
        },
        "id": "VpdBpeRAoh9_",
        "outputId": "f2e0cb08-1f53-463d-d725-11300fb49901"
      },
      "source": [
        "data"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>season</th>\n",
              "      <th>city</th>\n",
              "      <th>date</th>\n",
              "      <th>team1</th>\n",
              "      <th>team2</th>\n",
              "      <th>toss_winner</th>\n",
              "      <th>toss_decision</th>\n",
              "      <th>result</th>\n",
              "      <th>dl_applied</th>\n",
              "      <th>winner</th>\n",
              "      <th>win_by_runs</th>\n",
              "      <th>win_by_wickets</th>\n",
              "      <th>player_of_match</th>\n",
              "      <th>venue</th>\n",
              "      <th>umpire1</th>\n",
              "      <th>umpire2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>2017</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>2017-04-05</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>Yuvraj Singh</td>\n",
              "      <td>Rajiv Gandhi International Stadium, Uppal</td>\n",
              "      <td>AY Dandekar</td>\n",
              "      <td>NJ Llong</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>2017</td>\n",
              "      <td>Pune</td>\n",
              "      <td>2017-04-06</td>\n",
              "      <td>Mumbai Indians</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>SPD Smith</td>\n",
              "      <td>Maharashtra Cricket Association Stadium</td>\n",
              "      <td>A Nand Kishore</td>\n",
              "      <td>S Ravi</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>2017</td>\n",
              "      <td>Rajkot</td>\n",
              "      <td>2017-04-07</td>\n",
              "      <td>Gujarat Lions</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>CA Lynn</td>\n",
              "      <td>Saurashtra Cricket Association Stadium</td>\n",
              "      <td>Nitin Menon</td>\n",
              "      <td>CK Nandan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2017</td>\n",
              "      <td>Indore</td>\n",
              "      <td>2017-04-08</td>\n",
              "      <td>Rising Pune Supergiant</td>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Kings XI Punjab</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>GJ Maxwell</td>\n",
              "      <td>Holkar Cricket Stadium</td>\n",
              "      <td>AK Chaudhary</td>\n",
              "      <td>C Shamshuddin</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>2017</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>2017-04-08</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Delhi Capitals</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>bat</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>KM Jadhav</td>\n",
              "      <td>M Chinnaswamy Stadium</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>631</th>\n",
              "      <td>632</td>\n",
              "      <td>2016</td>\n",
              "      <td>Raipur</td>\n",
              "      <td>2016-05-22</td>\n",
              "      <td>Delhi Capitals</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>V Kohli</td>\n",
              "      <td>Shaheed Veer Narayan Singh International Stadium</td>\n",
              "      <td>A Nand Kishore</td>\n",
              "      <td>BNJ Oxenford</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>632</th>\n",
              "      <td>633</td>\n",
              "      <td>2016</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>2016-05-24</td>\n",
              "      <td>Gujarat Lions</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>AB de Villiers</td>\n",
              "      <td>M Chinnaswamy Stadium</td>\n",
              "      <td>AK Chaudhary</td>\n",
              "      <td>HDPK Dharmasena</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>633</th>\n",
              "      <td>634</td>\n",
              "      <td>2016</td>\n",
              "      <td>Delhi</td>\n",
              "      <td>2016-05-25</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>Kolkata Knight Riders</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>MC Henriques</td>\n",
              "      <td>Feroz Shah Kotla</td>\n",
              "      <td>M Erasmus</td>\n",
              "      <td>C Shamshuddin</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>634</th>\n",
              "      <td>635</td>\n",
              "      <td>2016</td>\n",
              "      <td>Delhi</td>\n",
              "      <td>2016-05-27</td>\n",
              "      <td>Gujarat Lions</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>field</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>DA Warner</td>\n",
              "      <td>Feroz Shah Kotla</td>\n",
              "      <td>M Erasmus</td>\n",
              "      <td>CK Nandan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>635</th>\n",
              "      <td>636</td>\n",
              "      <td>2016</td>\n",
              "      <td>Bangalore</td>\n",
              "      <td>2016-05-29</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>Royal Challengers Bangalore</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>bat</td>\n",
              "      <td>normal</td>\n",
              "      <td>0</td>\n",
              "      <td>Sunrisers Hyderabad</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>BCJ Cutting</td>\n",
              "      <td>M Chinnaswamy Stadium</td>\n",
              "      <td>HDPK Dharmasena</td>\n",
              "      <td>BNJ Oxenford</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>636 rows × 17 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      id  season  ...          umpire1          umpire2\n",
              "0      1    2017  ...      AY Dandekar         NJ Llong\n",
              "1      2    2017  ...   A Nand Kishore           S Ravi\n",
              "2      3    2017  ...      Nitin Menon        CK Nandan\n",
              "3      4    2017  ...     AK Chaudhary    C Shamshuddin\n",
              "4      5    2017  ...              NaN              NaN\n",
              "..   ...     ...  ...              ...              ...\n",
              "631  632    2016  ...   A Nand Kishore     BNJ Oxenford\n",
              "632  633    2016  ...     AK Chaudhary  HDPK Dharmasena\n",
              "633  634    2016  ...        M Erasmus    C Shamshuddin\n",
              "634  635    2016  ...        M Erasmus        CK Nandan\n",
              "635  636    2016  ...  HDPK Dharmasena     BNJ Oxenford\n",
              "\n",
              "[636 rows x 17 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rz6AN1HAo5gR",
        "outputId": "2cf78b11-12b0-4f40-dae4-f5863ab57a5a"
      },
      "source": [
        "data['umpire2'].value_counts()"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SJA Taufel         54\n",
              "C Shamshuddin      50\n",
              "S Ravi             49\n",
              "RJ Tucker          38\n",
              "CK Nandan          36\n",
              "RB Tiffin          30\n",
              "VA Kulkarni        28\n",
              "SK Tarapore        26\n",
              "BNJ Oxenford       25\n",
              "AM Saheba          23\n",
              "M Erasmus          22\n",
              "RE Koertzen        21\n",
              "DJ Harper          18\n",
              "AK Chaudhary       15\n",
              "HDPK Dharmasena    14\n",
              "SL Shastri         13\n",
              "K Srinath          13\n",
              "NJ Llong           13\n",
              "K Hariharan        11\n",
              "S Asnani           11\n",
              "CB Gaffaney        10\n",
              "VK Sharma           9\n",
              "BR Doctrove         8\n",
              "RK Illingworth      8\n",
              "Nitin Menon         8\n",
              "PR Reiffel          8\n",
              "IL Howell           7\n",
              "SS Hazare           6\n",
              "PG Pathak           6\n",
              "GA Pratapkumar      6\n",
              "AL Hill             6\n",
              "I Shivram           6\n",
              "S Das               5\n",
              "A Nand Kishore      5\n",
              "TH Wijewardene      5\n",
              "BG Jerling          4\n",
              "AV Jayaprakash      4\n",
              "K Srinivasan        3\n",
              "A Deshmukh          3\n",
              "SD Ranade           2\n",
              "MR Benson           2\n",
              "SJ Davis            1\n",
              "JD Cloete           1\n",
              "SD Fry              1\n",
              "Subroto Das         1\n",
              "Name: umpire2, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ViFFgJUepE7y"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}